<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:

       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="cpp.compilers">

	<!-- ================================================= -->
	<!--           C++ Compiler Override Targets           -->
	<!-- ================================================= -->
	<!--
		C++ compilation targets depend on certain properties being set.
		The targets will only run if those properties are set, and they
		are set through the init target.

		These targets, if run first, will override the values set during
		init, and restrict the set of compilers used to _only_ those whose
		targets are run.

		E.g. ./ant cpp.hla13.compile                // compile HLA 1.3 interface for all available compilers
		     ./ant vc14_3 vc14_2 cpp.hla13.compile  // compile HLA 1.3 interface with VC 14.3 and 14.2

		If a compiler is not installed, it will always be skipped, even if specified here.
	-->
	<!-- Diable automatic enabling of all builds. If build manually specified, it will still run. -->
	<target name="cpp.disable">
		<property name="cpp.compilers.override" value="true"/>
		<echo>Turned off automatic enabling of all C++ builds/compilers</echo>
	</target>

	<!-- Visual Studio 2022 -->
	<target name="vc14_3">
		<cpp-override compiler="vc14_3" build="release"/>
		<cpp-override compiler="vc14_3" build="debug"/>
	</target>
	
	<target name="vc14_3.release">
		<cpp-override compiler="vc14_3" build="release"/>
	</target>

	<target name="vc14_3.debug">
		<cpp-override compiler="vc14_3" build="debug"/>
	</target>
	
	<!-- Visual Studio 2019 -->
	<target name="vc14_2">
		<cpp-override compiler="vc14_2" build="release"/>
		<cpp-override compiler="vc14_2" build="debug"/>
	</target>
	
	<target name="vc14_2.release">
		<cpp-override compiler="vc14_2" build="release"/>
	</target>

	<target name="vc14_2.debug">
		<cpp-override compiler="vc14_2" build="debug"/>
	</target>
	
	<!-- Visual Studio 2017 -->
	<target name="vc14_1">
		<cpp-override compiler="vc14_1" build="release"/>
		<cpp-override compiler="vc14_1" build="debug"/>
	</target>
	
	<target name="vc14_1.release">
		<cpp-override compiler="vc14_1" build="release"/>
	</target>

	<target name="vc14_1.debug">
		<cpp-override compiler="vc14_1" build="debug"/>
	</target>
	
	<!-- GCC Version 11 -->
	<target name="gcc11">
		<cpp-override compiler="gcc11" build="release"/>
		<cpp-override compiler="gcc11" build="debug"/>
	</target>
	
	<target name="gcc11.release">
		<cpp-override compiler="gcc11" build="release"/>
	</target>

	<target name="gcc11.debug">
		<cpp-override compiler="gcc11" build="debug"/>
	</target>


	<!-- ================================================================================= -->
	<!--                               Macro: cpp-override                                 -->
	<!-- ================================================================================= -->
	<!--
         Override the set of enabled compilers, adding the specific compiler to the enabled
         set. This disables the default enabling of all compilers so that each compiler must
         be manually turned on through calls to this macro.
	     
	     Usage Example:
	     <cpp-override compiler="vc14_3" arch="amd64" build="debug"/>
	-->
	<macrodef name="cpp-override" description="Set C++ compiler flag override">
		<!-- Attributes -->
		<attribute name="compiler" description="The compiler we want the variable set for"/>
		<attribute name="arch" description="The target arch (x86/amd64) to set" default="amd64"/>
		<attribute name="build" description="debug or release"/> 
		
		<!-- Task Definition -->
		<sequential>
			<!-- Set the override property so we know to skip automatic variable generation -->
			<property name="cpp.compilers.override" value="true"/>

			<!-- Set the build property that tells the C++ targets we want them run -->
			<echo>Enabled C++ Build: @{compiler}.@{arch}.@{build}</echo>
			<property name="@{compiler}.@{arch}.@{build}" value="true"/>
		</sequential>
	</macrodef>


</project>